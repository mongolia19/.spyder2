This chapter will be about getting started with Git. We will begin by explaining
some background on version control tools, then move on to how to get Git run-
ning on your system and finally how to get it set up to start working with. At the
end of this chapter you should understand why Git is around, why you should
use it and you should be all set up to do so.
About Version Control
What is “version control”, and why should you care? Version control is a system
that records changes to a file or set of files over time so that you can recall spe-
cific versions later. For the examples in this book you will use software source
code as the files being version controlled, though in reality you can do this with
nearly any type of file on a computer.
Git Basics
So, what is Git in a nutshell? This is an important section to absorb, because if
you understand what Git is and the fundamentals of how it works, then using
Git effectively will probably be much easier for you. As you learn Git, try to clear
your mind of the things you may know about other VCSs, such as Subversion
and Perforce; doing so will help you avoid subtle confusion when using the tool.
Git stores and thinks about information much differently than these other sys-
tems, even though the user interface is fairly similar, and understanding those
differences will help prevent you from becoming confused while using it.
31CHAPTER 1: Getting Started
Snapshots, Not Differences
The major difference between Git and any other VCS (Subversion and friends
included) is the way Git thinks about its data. Conceptually, most other systems
store information as a list of file-based changes. These systems (CVS, Subver-
sion, Perforce, Bazaar, and so on) think of the information they keep as a set of
files and the changes made to each file over time.
FIGURE 1-4
Storing data as
changes to a base
version of each file.
Git doesn’t think of or store its data this way. Instead, Git thinks of its data
more like a set of snapshots of a miniature filesystem. Every time you commit,
or save the state of your project in Git, it basically takes a picture of what all
your files look like at that moment and stores a reference to that snapshot. To
be efficient, if files have not changed, Git doesn’t store the file again, just a link
to the previous identical file it has already stored. Git thinks about its data more
like a stream of snapshots.
So we will expect you to know how to open Terminal in Mac or Command
Prompt or Powershell in Windows. If you don’t know what we’re talking about
here, you may need to stop and research that quickly so that you can follow the
rest of the examples and descriptions in this book.
Installing Git
Before you start using Git, you have to make it available on your computer.
Even if it’s already installed, it’s probably a good idea to update to the latest
version. You can either install it as a package or via another installer, or down-
load the source code and compile it yourself.
This book was written using Git version 2.0.0. Though most of the com-
mands we use should work even in ancient versions of Git, some of them
might not or might act slightly differently if you’re using an older ver-
sion. Since Git is quite excellent at preserving backwards compatibility,
any version after 2.0 should work just fine.
Installing on Linux
If you want to install the basic Git tools on Linux via a binary installer, you can
generally do so through the basic package-management tool that comes with
your distribution. If you’re on Fedora for example, you can use yum:
$ sudo yum install git-all
If you’re on a Debian-based distribution like Ubuntu, try apt-get:
36Installing Git
$ sudo apt-get install git-all
For more options, there are instructions for installing on several different
Unix flavors on the Git website, at http://git-scm.com/download/linux.
Installing on Mac
There are several ways to install Git on a Mac. The easiest is probably to install
the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this
simply by trying to run git from the Terminal the very first time. If you don’t
have it installed already, it will prompt you to install it.
If you want a more up to date version, you can also install it via a binary in-
staller. An OSX Git installer is maintained and available for download at the Git
website, at http://git-scm.com/download/mac.
FIGURE 1-7
Git OS X Installer.
You can also install it as part of the GitHub for Mac install. Their GUI Git tool
has an option to install command line tools as well. You can download that tool
from the GitHub for Mac website, at http://mac.github.com.
37CHAPTER 1: Getting Started
Installing on Windows
There are also a few ways to install Git on Windows. The most official build is
available for download on the Git website. Just go to http://git-scm.com/down-
load/win and the download will start automatically. Note that this is a project
called Git for Windows, which is separate from Git itself; for more information
on it, go to https://git-for-windows.github.io/.
Another easy way to get Git installed is by installing GitHub for Windows. The
installer includes a command line version of Git as well as the GUI. It also works
well with Powershell, and sets up solid credential caching and sane CRLF set-
tings. We’ll learn more about those things a little later, but suffice it to say
they’re things you want. You can download this from the GitHub for Windows
website, at http://windows.github.com.
Installing from Source
Some people may instead find it useful to install Git from source, because you’ll
get the most recent version. The binary installers tend to be a bit behind,
though as Git has matured in recent years, this has made less of a difference.
If you do want to install Git from source, you need to have the following li-
braries that Git depends on: curl, zlib, openssl, expat, and libiconv. For exam-
ple, if you’re on a system that has yum (such as Fedora) or apt-get (such as a
Debian based system), you can use one of these commands to install the mini-
mal dependencies for compiling and installing the Git binaries:
$ sudo yum install curl-devel expat-devel gettext-devel \
openssl-devel perl-devel zlib-devel
$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \
libz-dev libssl-dev
In order to be able to add the documentation in various formats (doc, html,
info), these additional dependencies are required (Note: users of RHEL and
RHEL-derivatives like CentOS and Scientific Linux will have to enable the EPEL
repository to download the docbook2X package):
$ sudo yum install asciidoc xmlto docbook2X
$ sudo apt-get install asciidoc xmlto docbook2x
Additionally, if you’re using Fedora/RHEL/RHEL-derivatives, you need to do
this
38First-Time Git Setup
$ sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi
due to binary name differences.
When you have all the necessary dependencies, you can go ahead and grab
the latest tagged release tarball from several places. You can get it via the Ker-
nel.org site, at https://www.kernel.org/pub/software/scm/git, or the mirror on
the GitHub web site, at https://github.com/git/git/releases. It’s generally a lit-
tle clearer what the latest version is on the GitHub page, but the kernel.org page
also has release signatures if you want to verify your download.
Vim, Emacs and Notepad++ are popular text editors often used by devel-
opers on Unix based systems like Linux and OS X or a Windows system. If
you are not familiar with either of these editors, you may need to search
for specific instructions for how to set up your favorite editor with Git.
You may find, if you don’t setup an editor like this, you will likely get into
a really confusing state when they are launched. Such example on a Win-
dows system may include a prematurely terminated Git operation during
a Git initiated edit.
Checking Your Settings
If you want to check your settings, you can use the git config --list com-
mand to list all the settings Git can find at that point:
$ git config --list
Undoing Things
At any stage, you may want to undo something. Here, we’ll review a few basic
tools for undoing changes that you’ve made. Be careful, because you can’t al-
ways undo some of these undos. This is one of the few areas in Git where you
may lose some work if you do it wrong.
One of the common undos takes place when you commit too early and pos-
sibly forget to add some files, or you mess up your commit message. If you want
to try that commit again, you can run commit with the --amend option:
$ git commit --amend
This command takes your staging area and uses it for the commit. If you’ve
made no changes since your last commit (for instance, you run this command
immediately after your previous commit), then your snapshot will look exactly
the same, and all you’ll change is your commit message.
The same commit-message editor fires up, but it already contains the mes-
sage of your previous commit. You can edit the message the same as always,
but it overwrites your previous commit.
As an example, if you commit and then realize you forgot to stage the
changes in a file you wanted to add to this commit, you can do something like
this:
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
You end up with a single commit – the second commit replaces the results of
the first.
Unstaging a Staged File
56.	what is version control _______.
	A) believes the reform has reduced the government’s burden
	B) insists that welfare reform is doing little good for the poor
	C) is overenthusiastic about the success of welfare reform
	D) considers welfare reform to be fundamentally successful
57.	how to install git on Mac book?
	A) Because many families are divorced.
	B) Because government aid is now rare.
	C) Because their wages are low.
	D) Because the cost of living is rising.
58.	Who invented git _______.
	A) greater efforts should be made to improve people’s living standards
	B) 70 percent of the people there have been employed for two years
	C) 50 percent of the population no longer relies on welfare
	D) the living standards of most people are going down
59.	what is git used for _______.
	A) saving welfare funds
	B) rebuilding the work ethic
	C) providing more jobs
	D) cutting government expenses
60.	how to undo changes by git?
	A) the poverty rate was lover
	B) average living standards were higher
	C) the average worker was paid higher wages
	D) the poor used to rely on government aid